
MasterControlUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000280  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080012e  0080012e  00000342  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b1c  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d7  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000419  00000000  00000000  00001717  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e9  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000245  00000000  00000000  00002111  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002356  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9e:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <enc_setup_interrupts>:
{
	/* 
	* Setup pin interrupts for A and B pulse of encoder
	*/

	cli(); /* Disable interrupts */
  a6:	f8 94       	cli
	PCICR = _BV(PCIE2); /* Enable interrupts on PCINT 16:23 */
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK2 = _BV(ENC_A_PIN) | _BV(ENC_B_PIN); /* Mask desired pins */
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	sei(); /* Enable interrupts */
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <enc_setup_pins>:
	/* 
	 * Set direction and initial state of pins needed for encoder
	 */

	 /* Encoder pulses */
	ENC_REGISTER &= ~_BV(ENC_A_PIN) & ~_BV(ENC_B_PIN); /* Encoder as inputs */
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	83 7f       	andi	r24, 0xF3	; 243
  bc:	8a b9       	out	0x0a, r24	; 10
	ENC_PORT |= _BV(ENC_A_PIN) | _BV(ENC_B_PIN); /* Enable internal pullup resistors */
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	8c 60       	ori	r24, 0x0C	; 12
  c2:	8b b9       	out	0x0b, r24	; 11
	/* Encoder leds */
	ENC_LED_REGISTER |= _BV(ENC_GREEN) | _BV(ENC_RED); /* Output for LEDS */
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	80 6c       	ori	r24, 0xC0	; 192
  c8:	84 b9       	out	0x04, r24	; 4
	/* Set leds to off */
	ENC_LED_PORT &= ~_BV(ENC_GREEN) & ~_BV(ENC_RED);
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	8f 73       	andi	r24, 0x3F	; 63
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	08 95       	ret

000000d2 <enc_green_on>:


/* LED functions */
void enc_green_on(void)
{
	ENC_LED_PORT |= _BV(ENC_GREEN);
  d2:	2e 9a       	sbi	0x05, 6	; 5
  d4:	08 95       	ret

000000d6 <enc_green_off>:
}

void enc_green_off(void)
{
	ENC_LED_PORT &= ~_BV(ENC_GREEN);
  d6:	2e 98       	cbi	0x05, 6	; 5
  d8:	08 95       	ret

000000da <enc_red_on>:
}

void enc_red_on(void)
{
	ENC_LED_PORT |= _BV(ENC_RED);
  da:	2f 9a       	sbi	0x05, 7	; 5
  dc:	08 95       	ret

000000de <enc_red_off>:
}

void enc_red_off(void)
{
	ENC_LED_PORT &= ~_BV(ENC_RED);
  de:	2f 98       	cbi	0x05, 7	; 5
  e0:	08 95       	ret

000000e2 <main>:

State_code cur_state = run1;

int main(void)
{
	enc_setup_pins();
  e2:	0e 94 5c 00 	call	0xb8	; 0xb8 <enc_setup_pins>
	enc_setup_interrupts();
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <enc_setup_interrupts>
	states[cur_state]->entry_action();
  ea:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <cur_state>
  ee:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <cur_state+0x1>
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	e6 5e       	subi	r30, 0xE6	; 230
  f8:	fe 4f       	sbci	r31, 0xFE	; 254
  fa:	01 90       	ld	r0, Z+
  fc:	f0 81       	ld	r31, Z
  fe:	e0 2d       	mov	r30, r0
 100:	01 90       	ld	r0, Z+
 102:	f0 81       	ld	r31, Z
 104:	e0 2d       	mov	r30, r0
 106:	09 95       	icall
    while (1) 
    {
    }
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x26>

0000010a <__vector_5>:



/** Interrupt service routines **/
ISR(ENC_INT_VECTOR) 
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	 */
	static int8_t lookup_table[] = {0, -1, 1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, 0};
	static uint8_t enc_val = 0; /* Holds encoder history */
	static int8_t enc_count = 0; /* Holds amount of encoder ticks has passed since click */

	enc_val = enc_val << 2;    /* Make room for new readings */
 130:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <enc_val.1536>
 134:	8e 2f       	mov	r24, r30
 136:	88 0f       	add	r24, r24
 138:	88 0f       	add	r24, r24
 13a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <enc_val.1536>
	/* This part will need to be changed if encoder pins are changed */
	enc_val = enc_val | ((PIND & 0x0C) >> 2); /* Mask encoder pins and move them to LSB */
 13e:	e9 b1       	in	r30, 0x09	; 9
 140:	ec 70       	andi	r30, 0x0C	; 12
 142:	e6 95       	lsr	r30
 144:	e6 95       	lsr	r30
 146:	e8 2b       	or	r30, r24
 148:	e0 93 2f 01 	sts	0x012F, r30	; 0x80012f <enc_val.1536>
	enc_count += lookup_table[enc_val & 0x0F];  // update encoder history
 14c:	ef 70       	andi	r30, 0x0F	; 15
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	e2 5e       	subi	r30, 0xE2	; 226
 152:	fe 4f       	sbci	r31, 0xFE	; 254
 154:	90 81       	ld	r25, Z
 156:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 15a:	89 0f       	add	r24, r25
 15c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>

	/* State machine handling */
	if ((enc_count/4) == 1) { /* Enc_plus event */
 160:	9c ef       	ldi	r25, 0xFC	; 252
 162:	98 0f       	add	r25, r24
 164:	94 30       	cpi	r25, 0x04	; 4
 166:	d0 f5       	brcc	.+116    	; 0x1dc <__vector_5+0xd2>

/** State functions **/
inline void make_transition(State_code *s, Event_code e)
{
	State_code next_state = NULL_EVENT;
	lookup_transition(&next_state, *s, e);
 168:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <cur_state>
 16c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <cur_state+0x1>
 170:	e0 e0       	ldi	r30, 0x00	; 0
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	42 e1       	ldi	r20, 0x12	; 18
 176:	51 e0       	ldi	r21, 0x01	; 1
 178:	cf e0       	ldi	r28, 0x0F	; 15
 17a:	d7 e2       	ldi	r29, 0x27	; 39
inline void lookup_transition(State_code *temp, State_code s, Event_code e)
{
	int i; /* Loop variable */
	for(i = 0; i < TRANS_COUNT; ++i)
	{
		if ((s == transition_lookup[i].this_state) && (e == transition_lookup[i].this_event)) /* Find state and event in lookup */
 17c:	20 81       	ld	r18, Z
 17e:	31 81       	ldd	r19, Z+1	; 0x01
 180:	82 17       	cp	r24, r18
 182:	93 07       	cpc	r25, r19
 184:	31 f4       	brne	.+12     	; 0x192 <__vector_5+0x88>
 186:	22 81       	ldd	r18, Z+2	; 0x02
 188:	33 81       	ldd	r19, Z+3	; 0x03
 18a:	23 2b       	or	r18, r19
 18c:	11 f4       	brne	.+4      	; 0x192 <__vector_5+0x88>
		{
			*temp = transition_lookup[i].next_state; /* Return the next state */
 18e:	c4 81       	ldd	r28, Z+4	; 0x04
 190:	d5 81       	ldd	r29, Z+5	; 0x05
 192:	36 96       	adiw	r30, 0x06	; 6
}

inline void lookup_transition(State_code *temp, State_code s, Event_code e)
{
	int i; /* Loop variable */
	for(i = 0; i < TRANS_COUNT; ++i)
 194:	e4 17       	cp	r30, r20
 196:	f5 07       	cpc	r31, r21
 198:	89 f7       	brne	.-30     	; 0x17c <__vector_5+0x72>
/** State functions **/
inline void make_transition(State_code *s, Event_code e)
{
	State_code next_state = NULL_EVENT;
	lookup_transition(&next_state, *s, e);
	if (next_state != NULL_EVENT) {
 19a:	cf 30       	cpi	r28, 0x0F	; 15
 19c:	27 e2       	ldi	r18, 0x27	; 39
 19e:	d2 07       	cpc	r29, r18
 1a0:	d1 f0       	breq	.+52     	; 0x1d6 <__vector_5+0xcc>
		states[*s]->exit_action(); /* Before leaving current state */
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	fc 01       	movw	r30, r24
 1a8:	e6 5e       	subi	r30, 0xE6	; 230
 1aa:	fe 4f       	sbci	r31, 0xFE	; 254
 1ac:	01 90       	ld	r0, Z+
 1ae:	f0 81       	ld	r31, Z
 1b0:	e0 2d       	mov	r30, r0
 1b2:	02 80       	ldd	r0, Z+2	; 0x02
 1b4:	f3 81       	ldd	r31, Z+3	; 0x03
 1b6:	e0 2d       	mov	r30, r0
 1b8:	09 95       	icall
		*s = next_state;
 1ba:	d0 93 31 01 	sts	0x0131, r29	; 0x800131 <cur_state+0x1>
 1be:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <cur_state>
		states[*s]->entry_action(); /* Enter new state */
 1c2:	cc 0f       	add	r28, r28
 1c4:	dd 1f       	adc	r29, r29
 1c6:	c6 5e       	subi	r28, 0xE6	; 230
 1c8:	de 4f       	sbci	r29, 0xFE	; 254
 1ca:	e8 81       	ld	r30, Y
 1cc:	f9 81       	ldd	r31, Y+1	; 0x01
 1ce:	01 90       	ld	r0, Z+
 1d0:	f0 81       	ld	r31, Z
 1d2:	e0 2d       	mov	r30, r0
 1d4:	09 95       	icall
	enc_count += lookup_table[enc_val & 0x0F];  // update encoder history

	/* State machine handling */
	if ((enc_count/4) == 1) { /* Enc_plus event */
		make_transition(&cur_state, enc_plus);
		enc_count = 0;
 1d6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
 1da:	3d c0       	rjmp	.+122    	; 0x256 <__vector_5+0x14c>
	} else if ((enc_count/4) == -1) { /* Enc_minus event */
 1dc:	89 5f       	subi	r24, 0xF9	; 249
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	d0 f5       	brcc	.+116    	; 0x256 <__vector_5+0x14c>

/** State functions **/
inline void make_transition(State_code *s, Event_code e)
{
	State_code next_state = NULL_EVENT;
	lookup_transition(&next_state, *s, e);
 1e2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <cur_state>
 1e6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <cur_state+0x1>
 1ea:	e0 e0       	ldi	r30, 0x00	; 0
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	42 e1       	ldi	r20, 0x12	; 18
 1f0:	51 e0       	ldi	r21, 0x01	; 1
 1f2:	cf e0       	ldi	r28, 0x0F	; 15
 1f4:	d7 e2       	ldi	r29, 0x27	; 39
inline void lookup_transition(State_code *temp, State_code s, Event_code e)
{
	int i; /* Loop variable */
	for(i = 0; i < TRANS_COUNT; ++i)
	{
		if ((s == transition_lookup[i].this_state) && (e == transition_lookup[i].this_event)) /* Find state and event in lookup */
 1f6:	20 81       	ld	r18, Z
 1f8:	31 81       	ldd	r19, Z+1	; 0x01
 1fa:	82 17       	cp	r24, r18
 1fc:	93 07       	cpc	r25, r19
 1fe:	39 f4       	brne	.+14     	; 0x20e <__vector_5+0x104>
 200:	22 81       	ldd	r18, Z+2	; 0x02
 202:	33 81       	ldd	r19, Z+3	; 0x03
 204:	21 30       	cpi	r18, 0x01	; 1
 206:	31 05       	cpc	r19, r1
 208:	11 f4       	brne	.+4      	; 0x20e <__vector_5+0x104>
		{
			*temp = transition_lookup[i].next_state; /* Return the next state */
 20a:	c4 81       	ldd	r28, Z+4	; 0x04
 20c:	d5 81       	ldd	r29, Z+5	; 0x05
 20e:	36 96       	adiw	r30, 0x06	; 6
}

inline void lookup_transition(State_code *temp, State_code s, Event_code e)
{
	int i; /* Loop variable */
	for(i = 0; i < TRANS_COUNT; ++i)
 210:	e4 17       	cp	r30, r20
 212:	f5 07       	cpc	r31, r21
 214:	81 f7       	brne	.-32     	; 0x1f6 <__vector_5+0xec>
/** State functions **/
inline void make_transition(State_code *s, Event_code e)
{
	State_code next_state = NULL_EVENT;
	lookup_transition(&next_state, *s, e);
	if (next_state != NULL_EVENT) {
 216:	cf 30       	cpi	r28, 0x0F	; 15
 218:	27 e2       	ldi	r18, 0x27	; 39
 21a:	d2 07       	cpc	r29, r18
 21c:	d1 f0       	breq	.+52     	; 0x252 <__vector_5+0x148>
		states[*s]->exit_action(); /* Before leaving current state */
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	fc 01       	movw	r30, r24
 224:	e6 5e       	subi	r30, 0xE6	; 230
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	01 90       	ld	r0, Z+
 22a:	f0 81       	ld	r31, Z
 22c:	e0 2d       	mov	r30, r0
 22e:	02 80       	ldd	r0, Z+2	; 0x02
 230:	f3 81       	ldd	r31, Z+3	; 0x03
 232:	e0 2d       	mov	r30, r0
 234:	09 95       	icall
		*s = next_state;
 236:	d0 93 31 01 	sts	0x0131, r29	; 0x800131 <cur_state+0x1>
 23a:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <cur_state>
		states[*s]->entry_action(); /* Enter new state */
 23e:	cc 0f       	add	r28, r28
 240:	dd 1f       	adc	r29, r29
 242:	c6 5e       	subi	r28, 0xE6	; 230
 244:	de 4f       	sbci	r29, 0xFE	; 254
 246:	e8 81       	ld	r30, Y
 248:	f9 81       	ldd	r31, Y+1	; 0x01
 24a:	01 90       	ld	r0, Z+
 24c:	f0 81       	ld	r31, Z
 24e:	e0 2d       	mov	r30, r0
 250:	09 95       	icall
	if ((enc_count/4) == 1) { /* Enc_plus event */
		make_transition(&cur_state, enc_plus);
		enc_count = 0;
	} else if ((enc_count/4) == -1) { /* Enc_minus event */
		make_transition(&cur_state, enc_minus);
		enc_count = 0;
 252:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
	}
}
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
