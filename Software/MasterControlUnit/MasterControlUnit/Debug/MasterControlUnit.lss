
MasterControlUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001f6  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800110  00800110  0000029a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078f  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000674  00000000  00000000  00000ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  00001157  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  000018de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 00 	call	0xee	; 0xee <main>
  9e:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <enc_setup_interrupts>:
{
	/* 
	 * Setup pin interrupts for A and B pulse of encoder
	 */

	PCICR = _BV(PCIE2); /* Enable interrupts on PCINT 16:23 */
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK2 = _BV(ENC_A_PIN) | _BV(ENC_B_PIN); /* Mask desired pins */
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	sei(); /* Enable interrupts */
  b2:	78 94       	sei
  b4:	08 95       	ret

000000b6 <enc_setup_pins>:
	/* 
	 * Set direction and initial state of pins needed for encoder
	 */

	 /* Encoder pulses */
	ENC_REGISTER &= ~_BV(ENC_A_PIN) & ~_BV(ENC_B_PIN); /* Encoder as inputs */
  b6:	8a b1       	in	r24, 0x0a	; 10
  b8:	83 7f       	andi	r24, 0xF3	; 243
  ba:	8a b9       	out	0x0a, r24	; 10
	ENC_PORT |= _BV(ENC_A_PIN) | _BV(ENC_B_PIN); /* Enable internal pullup resistors */
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8c 60       	ori	r24, 0x0C	; 12
  c0:	8b b9       	out	0x0b, r24	; 11
	/* Encoder leds */
	ENC_LED_REGISTER |= _BV(ENC_GREEN) | _BV(ENC_RED); /* Output for LEDS */
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	80 6c       	ori	r24, 0xC0	; 192
  c6:	84 b9       	out	0x04, r24	; 4
	/* Set leds to off */
	CLEAR(ENC_LED_PORT, ENC_GREEN);
  c8:	2e 98       	cbi	0x05, 6	; 5
	CLEAR(ENC_LED_PORT, ENC_RED);
  ca:	2f 98       	cbi	0x05, 7	; 5
  cc:	08 95       	ret

000000ce <setup_debounce>:
	 * Setup button debounce by having a timer interrupt that polls 
	 * the button pin periodically.
	 */

	 /* Setup timer interrupt */
	 cli(); /* Disable interrupts */
  ce:	f8 94       	cli
	TCCR0A |= _BV(WGM01); /* Set to CTC mode */
  d0:	84 b5       	in	r24, 0x24	; 36
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS02) | _BV(CS00); /* Set clock source and prescaler */
  d6:	85 b5       	in	r24, 0x25	; 37
  d8:	85 60       	ori	r24, 0x05	; 5
  da:	85 bd       	out	0x25, r24	; 37
	OCR0A =	OCNT_MAX; /* Set max counter value */
  dc:	86 e2       	ldi	r24, 0x26	; 38
  de:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(OCIE0A); /* Enable timer interrupt */
  e0:	ee e6       	ldi	r30, 0x6E	; 110
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	80 83       	st	Z, r24
	sei(); /* Enable interrupts */
  ea:	78 94       	sei
  ec:	08 95       	ret

000000ee <main>:
volatile long enc_count = 0; /* Global that hold current value for encoder count */

int main(void)
{
	/* Initialize hardware to handle encoder */
	enc_setup_pins();
  ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <enc_setup_pins>
	enc_setup_interrupts();
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <enc_setup_interrupts>
	setup_debounce();
  f6:	0e 94 67 00 	call	0xce	; 0xce <setup_debounce>
	DDRC &= ~_BV(PC0) & ~_BV(PC1);
  fa:	87 b1       	in	r24, 0x07	; 7
  fc:	8c 7f       	andi	r24, 0xFC	; 252
  fe:	87 b9       	out	0x07, r24	; 7
	PORTC = _BV(PC0) | _BV(PC1);
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	88 b9       	out	0x08, r24	; 8
			SET(ENC_LED_PORT, ENC_GREEN);
		} else {
			CLEAR(ENC_LED_PORT, ENC_GREEN);
		}
		*/
    }
 104:	ff cf       	rjmp	.-2      	; 0x104 <main+0x16>

00000106 <__vector_5>:
	TIMSK0 |= _BV(OCIE0A); /* Enable timer interrupt */
	sei(); /* Enable interrupts */
}

ISR(ENC_INT_VECTOR) 
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	 * enc_count needs to be volatile global
	 */
	static int8_t lookup_table[] = {0, -1, 1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, 0};
	static uint8_t enc_val = 0;

	enc_val = enc_val << 2;    /* Make room for new readings */
 124:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <enc_val.1508>
 128:	8e 2f       	mov	r24, r30
 12a:	88 0f       	add	r24, r24
 12c:	88 0f       	add	r24, r24
 12e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <enc_val.1508>
	/* This part will need to be changed if encoder pins are changed */
	enc_val = enc_val | ((PIND & 0x0C) >> 2); /* Mask encoder pins and move them to LSB */
 132:	e9 b1       	in	r30, 0x09	; 9
 134:	ec 70       	andi	r30, 0x0C	; 12
 136:	e6 95       	lsr	r30
 138:	e6 95       	lsr	r30
 13a:	e8 2b       	or	r30, r24
 13c:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <enc_val.1508>

	enc_count += lookup_table[enc_val & 0x0F];  /* Update encoder history */
 140:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <enc_count>
 144:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <enc_count+0x1>
 148:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <enc_count+0x2>
 14c:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <enc_count+0x3>
 150:	ef 70       	andi	r30, 0x0F	; 15
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	08 2e       	mov	r0, r24
 15c:	00 0c       	add	r0, r0
 15e:	99 0b       	sbc	r25, r25
 160:	aa 0b       	sbc	r26, r26
 162:	bb 0b       	sbc	r27, r27
 164:	84 0f       	add	r24, r20
 166:	95 1f       	adc	r25, r21
 168:	a6 1f       	adc	r26, r22
 16a:	b7 1f       	adc	r27, r23
 16c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <enc_count>
 170:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <enc_count+0x1>
 174:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <enc_count+0x2>
 178:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <enc_count+0x3>
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
	 * To invert logic, pin poll can also be !(sfr & _BV(bit))
	 */

	static uint16_t State = 0x00;
	/* Move state | Poll pin | Dont care */
	State = (State<<1) | ((PINC & _BV(PC0)) >> PC0) | 0xe000;
 1ae:	46 b1       	in	r20, 0x06	; 6
 1b0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1b4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	90 6e       	ori	r25, 0xE0	; 224
 1be:	24 2f       	mov	r18, r20
 1c0:	21 70       	andi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	82 2b       	or	r24, r18
 1c6:	93 2b       	or	r25, r19
 1c8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 1cc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	if (State == 0xf000) { /* State == state comparison */
 1d0:	81 15       	cp	r24, r1
 1d2:	90 4f       	sbci	r25, 0xF0	; 240
 1d4:	21 f4       	brne	.+8      	; 0x1de <__vector_14+0x44>
		/* Action if button is pressed */
		TOGGLE(ENC_LED_PORT, ENC_GREEN);
 1d6:	95 b1       	in	r25, 0x05	; 5
 1d8:	80 e4       	ldi	r24, 0x40	; 64
 1da:	89 27       	eor	r24, r25
 1dc:	85 b9       	out	0x05, r24	; 5
		}
}
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
