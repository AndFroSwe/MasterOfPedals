
MasterControlUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  0000031c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080014c  0080014c  000003fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009cb  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000750  00000000  00000000  00000eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040e  00000000  00000000  00001607  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d2  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021e  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e4       	ldi	r26, 0x4C	; 76
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 00 	call	0xee	; 0xee <main>
  9e:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <enc_setup_interrupts>:
{
	/* 
	 * Setup pin interrupts for A and B pulse of encoder
	 */

	PCICR = _BV(PCIE2); /* Enable interrupts on PCINT 16:23 */
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK2 = _BV(ENC_A_PIN) | _BV(ENC_B_PIN); /* Mask desired pins */
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	sei(); /* Enable interrupts */
  b2:	78 94       	sei
  b4:	08 95       	ret

000000b6 <enc_setup_pins>:
	/* 
	 * Set direction and initial state of pins needed for encoder
	 */

	 /* Encoder pulses */
	ENC_REGISTER &= ~_BV(ENC_A_PIN) & ~_BV(ENC_B_PIN); /* Encoder as inputs */
  b6:	8a b1       	in	r24, 0x0a	; 10
  b8:	83 7f       	andi	r24, 0xF3	; 243
  ba:	8a b9       	out	0x0a, r24	; 10
	ENC_PORT |= _BV(ENC_A_PIN) | _BV(ENC_B_PIN); /* Enable internal pullup resistors */
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8c 60       	ori	r24, 0x0C	; 12
  c0:	8b b9       	out	0x0b, r24	; 11
	/* Encoder leds */
	ENC_LED_REGISTER |= _BV(ENC_GREEN) | _BV(ENC_RED); /* Output for LEDS */
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	80 6c       	ori	r24, 0xC0	; 192
  c6:	84 b9       	out	0x04, r24	; 4
	/* Set leds to off */
	CLEAR(ENC_LED_PORT, ENC_GREEN);
  c8:	2e 98       	cbi	0x05, 6	; 5
	CLEAR(ENC_LED_PORT, ENC_RED);
  ca:	2f 98       	cbi	0x05, 7	; 5
  cc:	08 95       	ret

000000ce <setup_debounce>:
	 * Setup button debounce by having a timer interrupt that polls 
	 * the button pin periodically.
	 */

	 /* Setup timer interrupt */
	 cli(); /* Disable interrupts */
  ce:	f8 94       	cli
	TCCR0A |= _BV(WGM01); /* Set to CTC mode */
  d0:	84 b5       	in	r24, 0x24	; 36
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS02) | _BV(CS00); /* Set clock source and prescaler */
  d6:	85 b5       	in	r24, 0x25	; 37
  d8:	85 60       	ori	r24, 0x05	; 5
  da:	85 bd       	out	0x25, r24	; 37
	OCR0A =	OCNT_MAX; /* Set max counter value */
  dc:	86 e2       	ldi	r24, 0x26	; 38
  de:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(OCIE0A); /* Enable timer interrupt */
  e0:	ee e6       	ldi	r30, 0x6E	; 110
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	80 83       	st	Z, r24
	sei(); /* Enable interrupts */
  ea:	78 94       	sei
  ec:	08 95       	ret

000000ee <main>:
void (*state_fun) (void); /* Global state function pointer */

int main(void)
{
	/* Initialize hardware to handle encoder */
	enc_setup_pins();
  ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <enc_setup_pins>
	enc_setup_interrupts();
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <enc_setup_interrupts>
	setup_debounce();
  f6:	0e 94 67 00 	call	0xce	; 0xce <setup_debounce>
	DDRC &= ~_BV(PC0) & ~_BV(PC1);
  fa:	87 b1       	in	r24, 0x07	; 7
  fc:	8c 7f       	andi	r24, 0xFC	; 252
  fe:	87 b9       	out	0x07, r24	; 7
	PORTC = _BV(PC0) | _BV(PC1);
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	88 b9       	out	0x08, r24	; 8
	/* Setup state machine */
	cur_state = ENTRY_STATE; /* Define starting state */
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <cur_state+0x1>
 10c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <cur_state>
	state_fun = states[cur_state]; /* Get first state function */
 110:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <states+0x4>
 114:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <states+0x5>
 118:	f0 93 53 01 	sts	0x0153, r31	; 0x800153 <state_fun+0x1>
 11c:	e0 93 52 01 	sts	0x0152, r30	; 0x800152 <state_fun>
	state_fun(); /* Execute first state function */
 120:	09 95       	icall

    while (1) 
    {
    }
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x34>

00000124 <enc_only_green>:
	sei(); /* Enable interrupts */
}
/** Encoder leds **/
void enc_only_green(void)
{
	SET(ENC_LED_PORT, ENC_GREEN); /* Light green led */
 124:	2e 9a       	sbi	0x05, 6	; 5
	CLEAR(ENC_LED_PORT, ENC_RED); /* Turn off red led */
 126:	2f 98       	cbi	0x05, 7	; 5
 128:	08 95       	ret

0000012a <s_save>:
}

/** State functions **/
void s_save(void)
{
	enc_only_green();
 12a:	0e 94 92 00 	call	0x124	; 0x124 <enc_only_green>
 12e:	08 95       	ret

00000130 <enc_only_red>:
	SET(ENC_LED_PORT, ENC_GREEN); /* Light green led */
	CLEAR(ENC_LED_PORT, ENC_RED); /* Turn off red led */
}
void enc_only_red(void)
{
	SET(ENC_LED_PORT, ENC_RED); /* Light red led */
 130:	2f 9a       	sbi	0x05, 7	; 5
	CLEAR(ENC_LED_PORT, ENC_GREEN); /* Turn off green led */
 132:	2e 98       	cbi	0x05, 6	; 5
 134:	08 95       	ret

00000136 <s_cancel>:
{
	enc_only_green();
}
void s_cancel(void)
{
	enc_only_red();
 136:	0e 94 98 00 	call	0x130	; 0x130 <enc_only_red>
 13a:	08 95       	ret

0000013c <enc_no_led>:
	SET(ENC_LED_PORT, ENC_RED); /* Light red led */
	CLEAR(ENC_LED_PORT, ENC_GREEN); /* Turn off green led */
}
void enc_no_led(void)
{
	CLEAR(ENC_LED_PORT, ENC_RED); /* Turn off red led */
 13c:	2f 98       	cbi	0x05, 7	; 5
	CLEAR(ENC_LED_PORT, ENC_GREEN); /* Turn off green led */
 13e:	2e 98       	cbi	0x05, 6	; 5
 140:	08 95       	ret

00000142 <s_idle>:
{
	enc_only_red();
}
void s_idle(void)
{
	enc_no_led();
 142:	0e 94 9e 00 	call	0x13c	; 0x13c <enc_no_led>
 146:	08 95       	ret

00000148 <lookup_transition>:
}
/* State support functions */
enum state_codes lookup_transition(enum state_codes s, enum events e)
{
 148:	e0 e0       	ldi	r30, 0x00	; 0
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
	int i; /* Loop variable */
	for(i = 0; i < TRANS_COUNT; ++i)
	{
		if ((s == state_transitions[i].this_state) && (e == state_transitions[i].this_event)) /* Find state and event in lookup */
 150:	40 81       	ld	r20, Z
 152:	51 81       	ldd	r21, Z+1	; 0x01
 154:	48 17       	cp	r20, r24
 156:	59 07       	cpc	r21, r25
 158:	89 f4       	brne	.+34     	; 0x17c <lookup_transition+0x34>
 15a:	42 81       	ldd	r20, Z+2	; 0x02
 15c:	53 81       	ldd	r21, Z+3	; 0x03
 15e:	46 17       	cp	r20, r22
 160:	57 07       	cpc	r21, r23
 162:	61 f4       	brne	.+24     	; 0x17c <lookup_transition+0x34>
		{
			return state_transitions[i].next_state; /* Return the next state */
 164:	f9 01       	movw	r30, r18
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	e2 0f       	add	r30, r18
 16c:	f3 1f       	adc	r31, r19
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e0 50       	subi	r30, 0x00	; 0
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	84 81       	ldd	r24, Z+4	; 0x04
 178:	95 81       	ldd	r25, Z+5	; 0x05
 17a:	08 95       	ret
}
/* State support functions */
enum state_codes lookup_transition(enum state_codes s, enum events e)
{
	int i; /* Loop variable */
	for(i = 0; i < TRANS_COUNT; ++i)
 17c:	2f 5f       	subi	r18, 0xFF	; 255
 17e:	3f 4f       	sbci	r19, 0xFF	; 255
 180:	36 96       	adiw	r30, 0x06	; 6
 182:	29 30       	cpi	r18, 0x09	; 9
 184:	31 05       	cpc	r19, r1
 186:	21 f7       	brne	.-56     	; 0x150 <lookup_transition+0x8>
		if ((s == state_transitions[i].this_state) && (e == state_transitions[i].this_event)) /* Find state and event in lookup */
		{
			return state_transitions[i].next_state; /* Return the next state */
		}
	}
};
 188:	08 95       	ret

0000018a <__vector_5>:
	CLEAR(ENC_LED_PORT, ENC_GREEN); /* Turn off green led */
}

/** Interrupt service routines **/
ISR(ENC_INT_VECTOR) 
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	 */
	static int8_t lookup_table[] = {0, -1, 1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, 0};
	static uint8_t enc_val = 0;
	static int8_t enc_count = 0;

	enc_val = enc_val << 2;    /* Make room for new readings */
 1ac:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <enc_val.1551>
 1b0:	8e 2f       	mov	r24, r30
 1b2:	88 0f       	add	r24, r24
 1b4:	88 0f       	add	r24, r24
 1b6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <enc_val.1551>
	/* This part will need to be changed if encoder pins are changed */
	enc_val = enc_val | ((PIND & 0x0C) >> 2); /* Mask encoder pins and move them to LSB */
 1ba:	e9 b1       	in	r30, 0x09	; 9
 1bc:	ec 70       	andi	r30, 0x0C	; 12
 1be:	e6 95       	lsr	r30
 1c0:	e6 95       	lsr	r30
 1c2:	e8 2b       	or	r30, r24
 1c4:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <enc_val.1551>
	enc_count += lookup_table[enc_val & 0x0F];  // update encoder history
 1c8:	ef 70       	andi	r30, 0x0F	; 15
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	e4 5c       	subi	r30, 0xC4	; 196
 1ce:	fe 4f       	sbci	r31, 0xFE	; 254
 1d0:	90 81       	ld	r25, Z
 1d2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <enc_count.1552>
 1d6:	89 0f       	add	r24, r25
 1d8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <enc_count.1552>

	/* State machine handling */
	enum events cur_event;
	if ((enc_count/4) == 1) { /* Enc_plus event */
 1dc:	9c ef       	ldi	r25, 0xFC	; 252
 1de:	98 0f       	add	r25, r24
 1e0:	94 30       	cpi	r25, 0x04	; 4
 1e2:	e0 f4       	brcc	.+56     	; 0x21c <__vector_5+0x92>
		cur_event = e_enc_plus;
		cur_state = lookup_transition(cur_state, cur_event); /* Find next state */
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cur_state>
 1ec:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <cur_state+0x1>
 1f0:	0e 94 a4 00 	call	0x148	; 0x148 <lookup_transition>
 1f4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <cur_state+0x1>
 1f8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <cur_state>
		state_fun = states[cur_state]; /* Get state function */
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	fc 01       	movw	r30, r24
 202:	ea 5c       	subi	r30, 0xCA	; 202
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	01 90       	ld	r0, Z+
 208:	f0 81       	ld	r31, Z
 20a:	e0 2d       	mov	r30, r0
 20c:	f0 93 53 01 	sts	0x0153, r31	; 0x800153 <state_fun+0x1>
 210:	e0 93 52 01 	sts	0x0152, r30	; 0x800152 <state_fun>
		state_fun(); /* Execute state function */
 214:	09 95       	icall
		enc_count = 0;
 216:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <enc_count.1552>
 21a:	1e c0       	rjmp	.+60     	; 0x258 <__vector_5+0xce>
	} else if ((enc_count/4) == -1) {
 21c:	89 5f       	subi	r24, 0xF9	; 249
 21e:	84 30       	cpi	r24, 0x04	; 4
 220:	d8 f4       	brcc	.+54     	; 0x258 <__vector_5+0xce>
		cur_event = e_enc_minus;
		cur_state = lookup_transition(cur_state, cur_event); /* Find next state */
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cur_state>
 22a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <cur_state+0x1>
 22e:	0e 94 a4 00 	call	0x148	; 0x148 <lookup_transition>
 232:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <cur_state+0x1>
 236:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <cur_state>
		state_fun = states[cur_state]; /* Get state function */
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	fc 01       	movw	r30, r24
 240:	ea 5c       	subi	r30, 0xCA	; 202
 242:	fe 4f       	sbci	r31, 0xFE	; 254
 244:	01 90       	ld	r0, Z+
 246:	f0 81       	ld	r31, Z
 248:	e0 2d       	mov	r30, r0
 24a:	f0 93 53 01 	sts	0x0153, r31	; 0x800153 <state_fun+0x1>
 24e:	e0 93 52 01 	sts	0x0152, r30	; 0x800152 <state_fun>
		state_fun(); /* Execute state function */
 252:	09 95       	icall
		enc_count = 0;
 254:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <enc_count.1552>
	}
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	7f 91       	pop	r23
 266:	6f 91       	pop	r22
 268:	5f 91       	pop	r21
 26a:	4f 91       	pop	r20
 26c:	3f 91       	pop	r19
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
	 * To invert logic, pin poll can also be !(sfr & _BV(bit))
	 */

	static uint16_t State = 0x00; /* Contains state history */
	/* Move state | Poll pin | Dont care */
	State = (State<<1) | ((PINC & _BV(PC0)) >> PC0) | 0xe000;
 29c:	46 b1       	in	r20, 0x06	; 6
 29e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 2a2:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	90 6e       	ori	r25, 0xE0	; 224
 2ac:	24 2f       	mov	r18, r20
 2ae:	21 70       	andi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	82 2b       	or	r24, r18
 2b4:	93 2b       	or	r25, r19
 2b6:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
 2ba:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
	if (State == 0xf000) { /* State == state comparison */
 2be:	81 15       	cp	r24, r1
 2c0:	90 4f       	sbci	r25, 0xF0	; 240
 2c2:	c9 f4       	brne	.+50     	; 0x2f6 <__vector_14+0x7c>
		/* Action if button is pressed */
		cur_state = lookup_transition(cur_state, e_enc_button); /* Find next state */
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cur_state>
 2cc:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <cur_state+0x1>
 2d0:	0e 94 a4 00 	call	0x148	; 0x148 <lookup_transition>
 2d4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <cur_state+0x1>
 2d8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <cur_state>
		state_fun = states[cur_state]; /* Get state function */
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	fc 01       	movw	r30, r24
 2e2:	ea 5c       	subi	r30, 0xCA	; 202
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	01 90       	ld	r0, Z+
 2e8:	f0 81       	ld	r31, Z
 2ea:	e0 2d       	mov	r30, r0
 2ec:	f0 93 53 01 	sts	0x0153, r31	; 0x800153 <state_fun+0x1>
 2f0:	e0 93 52 01 	sts	0x0152, r30	; 0x800152 <state_fun>
		state_fun(); /* Execute state function */
 2f4:	09 95       	icall
		}
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
