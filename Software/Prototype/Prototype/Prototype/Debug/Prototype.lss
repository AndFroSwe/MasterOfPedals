
Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000810  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bf  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e2  00000000  00000000  00001123  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f8  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e8  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  88:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupInputs>:
#include "main.h"

void setupInputs(void) 
{
	/* Enables input pins */
	DDRB &= ~_BV(PRESET);
  90:	20 98       	cbi	0x04, 0	; 4
	DDRC &= ~_BV(SET_1) & ~_BV(SET_2);
  92:	87 b1       	in	r24, 0x07	; 7
  94:	8c 7f       	andi	r24, 0xFC	; 252
  96:	87 b9       	out	0x07, r24	; 7
  98:	08 95       	ret

0000009a <setupOutputs>:
}

void setupOutputs(void)
{
	DDRC |= _BV(PED_1) | _BV(PED_2);
  9a:	87 b1       	in	r24, 0x07	; 7
  9c:	80 63       	ori	r24, 0x30	; 48
  9e:	87 b9       	out	0x07, r24	; 7
  a0:	08 95       	ret

000000a2 <main>:
}

int main(void)
{
	setupInputs();
  a2:	0e 94 48 00 	call	0x90	; 0x90 <setupInputs>
	setupOutputs();
  a6:	0e 94 4d 00 	call	0x9a	; 0x9a <setupOutputs>
	mode = 0; // Start in hot mode
  aa:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode+0x1>
  ae:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <mode>
	current_preset = 0;
  b2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <current_preset+0x1>
  b6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <current_preset>
	// Starting settings for pedals
	for (int i = 0; i < PEDALS; ++i)
	{
		pedals_hot1[i] = 1;
  ba:	e0 e0       	ldi	r30, 0x00	; 0
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	91 83       	std	Z+1, r25	; 0x01
  c4:	80 83       	st	Z, r24
  c6:	93 83       	std	Z+3, r25	; 0x03
  c8:	82 83       	std	Z+2, r24	; 0x02
	}
	for (int i = 0; i < PEDALS; ++i)
	{
		pedals_hot2[i] = 0;
  ca:	e8 e0       	ldi	r30, 0x08	; 8
  cc:	f1 e0       	ldi	r31, 0x01	; 1
  ce:	11 82       	std	Z+1, r1	; 0x01
  d0:	10 82       	st	Z, r1
  d2:	13 82       	std	Z+3, r1	; 0x03
  d4:	12 82       	std	Z+2, r1	; 0x02
    {
		// Read buttons
		if (!((PINB >>  SET_1) & 1)) // Set 1 is pressed
		{
			_delay_ms(DEBOUNCE_MS);
			current_preset = 1; // Toggle preset mode
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
		pedals_hot2[i] = 0;
	}
    while (1) // Main event loop
    {
		// Read buttons
		if (!((PINB >>  SET_1) & 1)) // Set 1 is pressed
  da:	18 99       	sbic	0x03, 0	; 3
  dc:	0e c0       	rjmp	.+28     	; 0xfa <main+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	4f ef       	ldi	r20, 0xFF	; 255
  e0:	89 e6       	ldi	r24, 0x69	; 105
  e2:	98 e1       	ldi	r25, 0x18	; 24
  e4:	41 50       	subi	r20, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x42>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x4c>
  ee:	00 00       	nop
		{
			_delay_ms(DEBOUNCE_MS);
			current_preset = 1; // Toggle preset mode
  f0:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <current_preset+0x1>
  f4:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <current_preset>
  f8:	1c c0       	rjmp	.+56     	; 0x132 <main+0x90>
		} else if (!((PINB >>  SET_2) & 1)) {// Set 2 is pressed
  fa:	19 99       	sbic	0x03, 1	; 3
  fc:	0e c0       	rjmp	.+28     	; 0x11a <main+0x78>
  fe:	4f ef       	ldi	r20, 0xFF	; 255
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	41 50       	subi	r20, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x62>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x6c>
 10e:	00 00       	nop
			_delay_ms(DEBOUNCE_MS);
			current_preset = 0; // Toggle preset mode
 110:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <current_preset+0x1>
 114:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <current_preset>
 118:	06 c0       	rjmp	.+12     	; 0x126 <main+0x84>
		}
		// Set appropriate settings
		if (current_preset == 0)
 11a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <current_preset>
 11e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <current_preset+0x1>
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	21 f4       	brne	.+8      	; 0x12e <main+0x8c>
		{
			PORTC &= ~_BV(PED_1) & ~_BV(PED_2);
 126:	88 b1       	in	r24, 0x08	; 8
 128:	8f 7c       	andi	r24, 0xCF	; 207
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	d6 cf       	rjmp	.-84     	; 0xda <main+0x38>
		} else if (current_preset == 1)
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	a1 f6       	brne	.-88     	; 0xda <main+0x38>
		{
			PORTC |= _BV(PED_1) | _BV(PED_2);
 132:	88 b1       	in	r24, 0x08	; 8
 134:	80 63       	ori	r24, 0x30	; 48
 136:	88 b9       	out	0x08, r24	; 8
 138:	d0 cf       	rjmp	.-96     	; 0xda <main+0x38>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
